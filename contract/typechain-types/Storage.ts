/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allFreelancerAddresses"
      | "employers"
      | "escrowFunds"
      | "freelancers"
      | "jobs"
      | "owner"
      | "roles"
      | "totalCompletedJobs"
      | "totalEmployers"
      | "totalFreelancers"
      | "totalJobs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allFreelancerAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "employers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowFunds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freelancers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "roles", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "totalCompletedJobs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalEmployers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFreelancers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalJobs", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "allFreelancerAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escrowFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freelancers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCompletedJobs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEmployers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFreelancers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalJobs", data: BytesLike): Result;
}

export interface Storage extends BaseContract {
  connect(runner?: ContractRunner | null): Storage;
  waitForDeployment(): Promise<this>;

  interface: StorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allFreelancerAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  employers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, string, string, boolean, bigint] & {
        employerAddress: string;
        name: string;
        industry: string;
        balance: bigint;
        country: string;
        image: string;
        registered: boolean;
        registration_date: bigint;
      }
    ],
    "view"
  >;

  escrowFunds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  freelancers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        freelancerAddress: string;
        name: string;
        skills: string;
        balance: bigint;
        country: string;
        gigTitle: string;
        gitDescription: string;
        jobsCompleted: bigint;
        registered: boolean;
        registration_date: bigint;
        starting_price: bigint;
      }
    ],
    "view"
  >;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, boolean, string] & {
        id: bigint;
        employer: string;
        title: string;
        description: string;
        budget: bigint;
        completed: boolean;
        hiredFreelancer: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  roles: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalCompletedJobs: TypedContractMethod<[], [bigint], "view">;

  totalEmployers: TypedContractMethod<[], [bigint], "view">;

  totalFreelancers: TypedContractMethod<[], [bigint], "view">;

  totalJobs: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allFreelancerAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "employers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, string, string, boolean, bigint] & {
        employerAddress: string;
        name: string;
        industry: string;
        balance: bigint;
        country: string;
        image: string;
        registered: boolean;
        registration_date: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "escrowFunds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "freelancers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        freelancerAddress: string;
        name: string;
        skills: string;
        balance: bigint;
        country: string;
        gigTitle: string;
        gitDescription: string;
        jobsCompleted: bigint;
        registered: boolean;
        registration_date: bigint;
        starting_price: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, boolean, string] & {
        id: bigint;
        employer: string;
        title: string;
        description: string;
        budget: bigint;
        completed: boolean;
        hiredFreelancer: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalCompletedJobs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalEmployers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFreelancers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalJobs"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
