/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Storage {
  export type FreelancerStruct = {
    freelancerAddress: AddressLike;
    name: string;
    skills: string;
    balance: BigNumberish;
    country: string;
    gigTitle: string;
    gitDescription: string;
    images: string[];
    jobsCompleted: BigNumberish;
    registered: boolean;
    registration_date: BigNumberish;
    starting_price: BigNumberish;
  };

  export type FreelancerStructOutput = [
    freelancerAddress: string,
    name: string,
    skills: string,
    balance: bigint,
    country: string,
    gigTitle: string,
    gitDescription: string,
    images: string[],
    jobsCompleted: bigint,
    registered: boolean,
    registration_date: bigint,
    starting_price: bigint
  ] & {
    freelancerAddress: string;
    name: string;
    skills: string;
    balance: bigint;
    country: string;
    gigTitle: string;
    gitDescription: string;
    images: string[];
    jobsCompleted: bigint;
    registered: boolean;
    registration_date: bigint;
    starting_price: bigint;
  };
}

export interface FreelancerLogicInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allFreelancerAddresses"
      | "editFreelancerProfile"
      | "employers"
      | "escrowFunds"
      | "freelancers"
      | "getFreelancerByAddress"
      | "jobs"
      | "owner"
      | "registerFreelancer"
      | "roles"
      | "totalCompletedJobs"
      | "totalEmployers"
      | "totalFreelancers"
      | "totalJobs"
      | "walletToUser"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FreelancerRegistered" | "WithdrawFund"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allFreelancerAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editFreelancerProfile",
    values: [string, string, string, string, string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "employers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowFunds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freelancers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreelancerByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerFreelancer",
    values: [
      AddressLike,
      string,
      string,
      string,
      string,
      string,
      string[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "roles", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "totalCompletedJobs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalEmployers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFreelancers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalJobs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "walletToUser",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allFreelancerAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editFreelancerProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escrowFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freelancers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreelancerByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerFreelancer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCompletedJobs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEmployers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFreelancers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalJobs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "walletToUser",
    data: BytesLike
  ): Result;
}

export namespace FreelancerRegisteredEvent {
  export type InputTuple = [
    freelancerAddress: AddressLike,
    images: string[],
    amount: BigNumberish
  ];
  export type OutputTuple = [
    freelancerAddress: string,
    images: string[],
    amount: bigint
  ];
  export interface OutputObject {
    freelancerAddress: string;
    images: string[];
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawFundEvent {
  export type InputTuple = [freelancer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [freelancer: string, amount: bigint];
  export interface OutputObject {
    freelancer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FreelancerLogic extends BaseContract {
  connect(runner?: ContractRunner | null): FreelancerLogic;
  waitForDeployment(): Promise<this>;

  interface: FreelancerLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allFreelancerAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  editFreelancerProfile: TypedContractMethod<
    [
      _name: string,
      _skills: string,
      _country: string,
      _gigTitle: string,
      _gigDesc: string,
      _images: string[],
      _starting_price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  employers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, string, string, boolean, bigint] & {
        employerAddress: string;
        name: string;
        industry: string;
        balance: bigint;
        country: string;
        image: string;
        registered: boolean;
        registration_date: bigint;
      }
    ],
    "view"
  >;

  escrowFunds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  freelancers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        freelancerAddress: string;
        name: string;
        skills: string;
        balance: bigint;
        country: string;
        gigTitle: string;
        gitDescription: string;
        jobsCompleted: bigint;
        registered: boolean;
        registration_date: bigint;
        starting_price: bigint;
      }
    ],
    "view"
  >;

  getFreelancerByAddress: TypedContractMethod<
    [_freelancer: AddressLike],
    [Storage.FreelancerStructOutput],
    "view"
  >;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, boolean, string] & {
        id: bigint;
        employer: string;
        title: string;
        description: string;
        budget: bigint;
        completed: boolean;
        hiredFreelancer: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerFreelancer: TypedContractMethod<
    [
      creator: AddressLike,
      _name: string,
      _skills: string,
      _country: string,
      _gigTitle: string,
      _gigDesc: string,
      _images: string[],
      _starting_price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  roles: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalCompletedJobs: TypedContractMethod<[], [bigint], "view">;

  totalEmployers: TypedContractMethod<[], [bigint], "view">;

  totalFreelancers: TypedContractMethod<[], [bigint], "view">;

  totalJobs: TypedContractMethod<[], [bigint], "view">;

  walletToUser: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allFreelancerAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "editFreelancerProfile"
  ): TypedContractMethod<
    [
      _name: string,
      _skills: string,
      _country: string,
      _gigTitle: string,
      _gigDesc: string,
      _images: string[],
      _starting_price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "employers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, string, string, boolean, bigint] & {
        employerAddress: string;
        name: string;
        industry: string;
        balance: bigint;
        country: string;
        image: string;
        registered: boolean;
        registration_date: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "escrowFunds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "freelancers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        freelancerAddress: string;
        name: string;
        skills: string;
        balance: bigint;
        country: string;
        gigTitle: string;
        gitDescription: string;
        jobsCompleted: bigint;
        registered: boolean;
        registration_date: bigint;
        starting_price: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFreelancerByAddress"
  ): TypedContractMethod<
    [_freelancer: AddressLike],
    [Storage.FreelancerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, boolean, string] & {
        id: bigint;
        employer: string;
        title: string;
        description: string;
        budget: bigint;
        completed: boolean;
        hiredFreelancer: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerFreelancer"
  ): TypedContractMethod<
    [
      creator: AddressLike,
      _name: string,
      _skills: string,
      _country: string,
      _gigTitle: string,
      _gigDesc: string,
      _images: string[],
      _starting_price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalCompletedJobs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalEmployers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFreelancers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalJobs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "walletToUser"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "FreelancerRegistered"
  ): TypedContractEvent<
    FreelancerRegisteredEvent.InputTuple,
    FreelancerRegisteredEvent.OutputTuple,
    FreelancerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawFund"
  ): TypedContractEvent<
    WithdrawFundEvent.InputTuple,
    WithdrawFundEvent.OutputTuple,
    WithdrawFundEvent.OutputObject
  >;

  filters: {
    "FreelancerRegistered(address,string[],uint256)": TypedContractEvent<
      FreelancerRegisteredEvent.InputTuple,
      FreelancerRegisteredEvent.OutputTuple,
      FreelancerRegisteredEvent.OutputObject
    >;
    FreelancerRegistered: TypedContractEvent<
      FreelancerRegisteredEvent.InputTuple,
      FreelancerRegisteredEvent.OutputTuple,
      FreelancerRegisteredEvent.OutputObject
    >;

    "WithdrawFund(address,uint256)": TypedContractEvent<
      WithdrawFundEvent.InputTuple,
      WithdrawFundEvent.OutputTuple,
      WithdrawFundEvent.OutputObject
    >;
    WithdrawFund: TypedContractEvent<
      WithdrawFundEvent.InputTuple,
      WithdrawFundEvent.OutputTuple,
      WithdrawFundEvent.OutputObject
    >;
  };
}
